

\set{COLOUR1}{#ffbb66}
\set{COLOUR1}{#FFAD5C}
\set{COLOUR2}{DarkBlue}

\import{aephea/simpledocument2.zmm}
\import{shared.zmm}
\input{myheader}        \: inline file, found at bottom of this file.


\<div id=asd_leftcolumn>{
   \"asd::maketoc"
}


\<div id=asd_document_outer> \"asd::add-toc-start"{Start}
\<div id=asd_document>

\<div class="asd_date">{\$toc_date}
\<div class="asd_version">{reaper-\finsert{../VERSION}}

\<div class="asd_title">{\$title}
\<div class="asd_subtitle">{\$subtitle}


\sec1{syn}{Synopsis}

\par{
   Reaper is a program for demultiplexing, trimming and filtering short read sequencing data.
   It is intended to be suitable for dealing with a wide range of sequencing protocols,
   and will be updated to support new protocols where the current set of features does
   not suffice.  It has the following features.

   }

\begin{itemize}{
   {$flow}{cascade}
   {$interitem}{1}
   {$align}{right}
   {$sublist}{\!begin{itemize}{
      {textindent}{2}
      {$align}{right}
      {$flow}{compact}
      {$interitem}{0}
      {$margintop}{0}
      {$itemmargin}{1}
   }}
   {$eosub}{\!end{itemize}}
}


\item{One read-at-time, written in C, file compression}
\$sublist
\item Small memory footprint (order of megabytes).
\item 1-4 million reads per minute (depending on read length, contamination check).
\item Twinned with \lref{tally.html}{tally} for fast uniquifying of reads.
\item Can read and write gzip-compressed data.
\$eosub

\item{Read trimming}
\$sublist
\item 3' adapter removal.
\item Sliding window median quality based trimming (\iref{qqq}{\opt{-qqq-check}}).
\item Low complexity tail removal with DUST-type criterion
         (\iref{dust}{\opt{-dust-suffix} and \opt{-dust-suffix-late}}).
\item Killer-B scrubbing (\iref{bbb}{\opt{--bcq-early} and \opt{--bcq-late}}).
\item Cluster-N cleansing (\iref{nnn}{\opt{-nnn-check}}).
\$eosub


\item{Each read is matched with the three prime adapter}
\$sublist
\item Smith-Waterman local alignment over full read and adapter.
\item Read/adapter match is user controlled (\opt{-3p-global}).
\item Handling of read-suffix adapter-prefix matching followed by read low complexity
         (\opt{-3p-prefix} and \opt{-3p-head-to-tail}).
\$eosub

\item{Flexible input and output}
\$sublist
\item By default the input is assumed to be in \fastq format.
\item A simple built-in parser allows a variety of input file formats (\opt{-record-format} and \opt{-record-format}).
\item Reaper transparently reads input that was compressed by gzip.
\item Reaper writes gzip output by default and this can be overridden (\opt{--nozip}).
\item A simple specification language allows flexible output file formats (\opt{-format-clean} and \opt{-format-lint}).
\item Rich selection of output field for comprehensive inspection.
\$eosub


\item{Barcode filtering}
\$sublist
\item Output split into per-barcode clean files and annotated discard files.
\item Recognise different layouts of barcodes and sequence inserts (\opt{-geom}).
\item Mismatches can be controlled (\opt{-3p-barcode}, \opt{-5p-barcode}, \opt{-5p-sinsert}).
\$eosub


\item{Quality checks}
\$sublist
\item Outputs per-barcode summary statistics for comprehensive QC plots.
\item Per-read characteristics available (e.g. alignment, trinucleotide score).
\$eosub


\item{Reads can be checked for ligation contamination}
\$sublist
\item Smith-Waterman local alignment.
\item Multiple checks for different oligos are possible.
\item Generically supported as \it{match requirements} for \it{tabu} sequences (\opt{-mr-tabu}).
\$eosub


\item{Paired end data}
\$sublist
\item It can work in conjuction with \lref{tally.html}{tally} to process paired end files.
\item This requires encoding the record offset in the output using the \v{%J} output syntax.
\$eosub


\end{itemize}


\sec1{gs}{Getting started}

\begin{itemize}{
   {$flow}{compact}
   {mark}{\*{itembullet}}
   {$interitem}{1}
   {$align}{right}
}

\item
\car{Choose the appropriate geometry for your data: one of \v{no-bc} (\_nobc),
   \v{5p-bc} (\_5pbc) or \v{3p-bc} (\_3pbc). This will be the argument
   to the \opt{-geom} option.
   The input file, normally (but not necessarily) a \fastq file, is specified
   by giving its name as argument to the \opt{-i} option.
   }


\item
\car{
   If your files are barcoded, find out what the barcodes are.}

\item
\car{
   If possible, try to find out the 3' adapter sequence and
   the 5' adapter sequence that were used.
   The former will be stripped from the read if present.
   The latter, if specified, is treated as a \it{tabu} sequence.
   A read will be discarded if it is found to contain any tabu sequence.
   }

\par{
   If you do not know the \_3pa it is possible to search for it in the
   input files with the program \lref{minion.html}{minion}, that is shipped with reaper.
   For a \fastq file called \v{input.fq.gz} usage is as follows:
   }

\verbatim{minion search-adapter -i input.fq.gz}

\car{
   By default \v{minion} will take the first 2 million reads. Use the
   \opt{-do} option to change this.
   }


\item
\car{
   Create a metadata file describing
   barcodes and adapter sequences.
   The required columns in this file depend on the geometry, as described
   in \secref{gr}. A line must be present
   for each barcode. The \_3pa must be specified in the \v{3p-ad} column.
   If you do not know the adapter, supply either an empty field or a single hyphen.
   The \v{tabu} column is similarly required. Use either the \_5pa if known,
   or supply an empty field or a single hyphen.
   }

\item
\car{
   The metadata file must be tab-separated with all fields present
   as described in \secref{gr}, and each row must have the same number of fields.
   Neither missing fields nor spurious fields are allowed.
   If a field is allowed to be empty it can be achieved either by leaving the field
   empty, or by using a single hyphen. Below is a list of example metadata
   files, one for each geometry.
   Note that copying and pasting such an example will yield a file with spaces
   rather than tab characters, and this would need fixing.
   }

\cpar{\_5pbc example metadata file (geometry 5p-bc)}{}
\verbatim{\:/
barcode         3p-ad                           tabu                            5p-si
ACTA            ATCTCGTATGCCGTCTTCTGCTTG        GTTCAGAGTTCTACAGTCCGACGATC      -
ACAA            ATCTCGTATGCCGTCTTCTGCTTG        GTTCAGAGTTCTACAGTCCGACGATC      -
CTAA            ATCTCGTATGCCGTCTTCTGCTTG        GTTCAGAGTTCTACAGTCCGACGATC      -}

\car{
   In this example no sequence inserts were used, but
   the \v{5p-si} (5' sequence insert) column is required to be present. All its fields
   are empty, as indicated by the use of a single hyphen. It can be further be noted
   that the only variable column is that containing the barcodes, as is
   to be expected.
   }

\cpar{\_3pbc example metadata file (geometry 3p-bc)}{}
\verbatim{\:/
3p-si   3p-ad                           barcode tabu
T       TCGTATGCCGTCTTCTGCTTGT          ACCT    GTTCAGAGTTCTACAGTCCGACGATC
T       TCGTATGCCGTCTTCTGCTTGT          AGCA    GTTCAGAGTTCTACAGTCCGACGATC
T       TCGTATGCCGTCTTCTGCTTGT          AGGT    GTTCAGAGTTCTACAGTCCGACGATC
T       TCGTATGCCGTCTTCTGCTTGT          CAAG    GTTCAGAGTTCTACAGTCCGACGATC}

\car{
   The column headers (and hence associated columns) do not need to be in a particular order.
   }

\cpar{\_nobc example metadata file (geometry no-bc)}{}
\verbatim{\:/
3p-ad                   tabu
TCGTATGCCGTCTTCTGCTTGT  GTTCAGAGTTCTACAGTCCGACGATC}


\item
\car{
   If the reads are barcoded, you will have created a metadata file.
   Suppose the geometry is \v{5p-bc}, the \fastq input is in a file called \v{sample.fastq} and
   the metadata file is called \v{sample.txt}.
   The basic reaper command line invocation then is:}

\verbatim{reaper -i sample.fastq -meta sample.txt -geom 5p-bc}

\car{or}

\verbatim{reaper -i sample.fastq -meta sample.txt -geom 5p-bc}

\car{
   Note that reaper places no requirements on file name suffixes, so
   both data file and metadata file may have arbitrary names.
   Additionally, the file containing the reads is allowed to be gzipped.}

\item
\car{
   If the reads are not barcoded, it is possible to run reaper with
   or without a metadata file. The metadata file requires just
   the columns \v{3p-ad} and \v{tabu}. Again, unknown fields
   can be specified by leaving the field empty or specifying a
   single hyphen. The invocation is similar as before, with
   just the \opt{-geom} option changed:
   }

\verbatim{reaper -i sample.fastq -meta sample.txt -geom no-bc}

\car{
   In the absence of barcodes, it is possible to run reaper
   without a metadata file. In this case the options \opt{-3pa}
   and \opt{-tabu} are required. If the corresponding sequences
   are not known, specify an empty string again either as \v{""} or as
   a single hyphen.
   }

\verbatim{\:/
reaper -i sample.fastq -geom no-bc -3pa TCGTATGCCGTCTTCTGCTTGT -tabu GTTCAGAGTTCTACAGTCCGACGATC}

\item
\car{
   By default output files are created that share the prefix \v{out}.
   Use the \opt{-basename} option to change this prefix. The supplied prefix
   may contain a path (i.e. directory components), but the path \it{must}
   already exist as reaper will not create it.
   }


\end{itemize}

\sec1{gr}{Read geometry}

\par{
   Three \it{geometries} are supported. A geometry is a description of what a read
   looks like, i.e. the \it{read design}. The supported geometries are
   described in greater detail below.
           \:     The test Makefile contains several
           \:     examples, each run with two different length cutoff parameters.  For each
           \:     geometry, there is an example 'meta' description file in the data directory.
           \:     The name of such a file is argument to the \opt{-meta} option.
   }

\par{
   In the read
   representation below, a part enclosed in \v{()} indicates that the part \bf{must}
   be present in the read, a part enclosed in \v{[]} is optional. A part enclosed
   in \v{<>} should \bf{not} be present. This is unique to the \_5pa part of
   a read, as the sequencing primer anneals to the \_5pa, and hence the latter
   should not be seen in the raw read. Currently we have no means to strip
   a read of a such a match and proceed. The occurrence of this phenomenon and the
   quality of the remaining read should be quantified and any prospected gain
   evaluated before such a scheme is implemented.
   }

\verbatim{\:/
         |  < - - - - - - - - - - - - Read geometry - - - - - - - - - - - - - ->
         |
Geometry |  <---------- 5p region --------->      Message  <---- 3p region ---->
---------+----------------------------------------------------------------------
 no-bc   |   < 5p-ad >                              M         [ 3p-ad ]
 3p-bc   |   < 5p-ad >                              M    ( 3p-si barcode 3p-ad )
 5p-bc   |   < 5p-ad > ( barcode ) [( 5p-si )]      M         [ 3p-ad ]}

\car{
   The \_5psi is special. If such a sequence insert is present in the read design, (a.k.a.\~geometry),
   it should be present in all reads.  For simplicity, the corresponding \v{5p-si} column
   is always required; if no sequence insert was used the fields in this column can be left empty.
   In the meta file, the following columns are \bf{required} by each of the geometries,
   although some of them may be empty.
   }

\verbatim{\:/
 Geometry   tabu barcode 5p-si 3p-si 3p-ad
---------|  ----+-------+-----+-----+-----+
 no-bc   |    * |       |     |     |  *  |
 3p-bc   |    * |   *   |     |  *  |  *  |
 5p-bc   |    * |   *   |  *  |     |  *  |}

\car{
   This data is used as follows, for each read.
   }

\begin{itemize}{
   {$flow}{cascade}
   {$interitem}{1}
   {$align}{right}
   \: {$sublist}{\!begin{itemize}{{$flow}{compact}{interitem}{0}{margintop}{0}}}
   \: {$eosub}{\!end{itemize}}
}
\item{The \v{barcode} column}
\car{
   If present, the meta file will normally have more than one data row,
   each row representing a different barcode, and the barcode column will
   normally be the only column that assumes different values.
   }

\par{
   If absent, the meta file should have only a single data row.
   For the \it{3p-bc} geometry, reaper constructs the concatenation of the sequences
   in columns \v{3p-si}, \v{barcode}, and \v{3p-ad} (note: \v{3p-si} may be empty).
   It does this for all
   different barcodes, and each such concatenation is aligned to the read. The
   best match, if it passes the alignment requirements, determines the barcode
   bucket to which the read is allocated.
   }

\par{
   For the \it{5p-bc} geometry, a matching barcode at the moment is required to be
   present at the beginning of the read.
   
   Mismatches may occur and the extent and types of allowable mismatches are
   under control of the user.

   Conceivably people might start to add random sequence inserts before their
   barcodes; this is not yet supported.

   }

\item{The \v{tabu} column}
\car{
   For all geometries the \v{tabu} column is treated the same. It may be empty, or
   it may contain one stretch of sequence, or a list of comma-separated
   sequences.  If a sequence is specified, it will be aligned to the read.  If
   a match is found that exceeds the requirements as specified by the program option
   \opt{-mr-tabu}, the read is discarded. There is currently no provision to simply remove the
   matching part.  We currently suggest to supply the \_5pa sequence, if
   known, as a \it{tabu} sequence.
   }

\item{The \v{5p-si} and \v{3p-si} columns}
\car{
   The \v{3p-si} column is only relevant for the \it{3p-bc} geometry. It is part
   of the concatenated sequence constructed and aligned as described above.
   }

\par{
   For the \v{5p-si} column, if present, an alignment is attempted against the
   leading part of the read. This alignment should pass the \opt{-5p-sinsert}
   alignment criteria in order for the read to pass.
   }
\end{itemize}



\sec1{alnbeh}{Matching the read geometry}


\par{
   When aligning reads with bits of sequence (adapters, barcodes and inserts),
   reaper computes a full local alignment matrix for the two sequences,
   sometimes on a restricted part of one of the two sequences to be aligned.
   The alignment matrix is used in various ways.
   }

\begin{itemize}{
   {$flow}{compact}
   {mark}{\*{itembullet}}
   {$interitem}{0}
   {$align}{right}
}
\item
\car{
   For checking matches with the \_3pa and \it{tabu} contamination,
   the highest scoring local alignment is considered. Neither
   read nor sequence to be matched is restricted.
   }
\item
\car{
   Additionally, for the \_3pa matches at
   the end of the read and the start of the adapter are considered.
   }
\item
\car{
   For a \_5pbc and for a \it{5' sequence insert} the aligment matrix is
   restricted to an initial part of the read.  The length of this part is equal
   to the length of the sequence to match plus the maximal allowed edit
   distance.
   }

\end{itemize}


\cpar{Alignment acceptance tests}{
   A fundamental test used by Reaper is whether an alignment between
   two sequences is considered to be a true match. These criteria are to a very large
   extent under control of the user. The test is generically described as follows.
   \group{Two sequences match if the highest scoring alignment satisfies:}
   }

\begin{itemize}{
   {$flow}{compact}
   {mark}{\*{itembullet}}
   {$interitem}{0}
   {$align}{right}
}
\item \car{\group{The alignment stretches over at least L aligned bases}.}
\item \car{\group{Along this stretch at most E edits (substitutions or gaps) are found}.}
\item \car{\group{Along this stretch at most G gaps are found}.}
\end{itemize}

\par{
   This is described in greater detail in the sections below.
   Importantly, if no gaps are allowed, the alignment algorithm will
   not generate alignments with gaps.
   }

\cpar{Use only the start of the adapter}{
   Three prime adapter contanimation almost always involves the leading part of the adapter,
   and using the full adapter sequence increases the chance of spurious matches.
   To this end, it is not advisable to use the full-length adapter.
   Reaper will by default only consider the \it{first eighteen} bases in the
   adapter. This number can be changed using the \opt{-restrict}{<int>} option.
   }

\cpar{Long reads}{
   It is usually unnecessary to trim three prime adapters from long reads, as
   more often than not adapter contanimation will occur rarely in the raw read
   files.  If adapter trimming is still desirable, there is a concern over
   false matches.  With matching parameters of e.g. 14/2/0 (alignment over 14
   bases with two mismatches and no indels allowed) each 14-mer in the adapter
   can be matched by 91 different 14-mers, and for an 18-base adapter this
   leads to 455 matching 14-mers.  Whilst this is a concern for both short
   reads and long reads, in long reads the scope for false positives is further
   amplified.  In transcriptomics data this could lead to gaps in transcript
   assemblies.

   As a very simple unsophisticated measure reaper now offers the
   \opt{-guard}{<int>} option.  This will hide the first \usearg{<int>} read
   bases from the matching process.  \it{This option is off by default.}
}

\sec1{alnbeh2}{Alignment tests}


\par{
   An important part of reaper is the way in which a read/3p-adapter alignment is
   judged to resemble a true match. The complicating factor is that only a
   match to the initial part of the adapter may be present, possibly followed
   by poly-As or low complexity sequence where the sequencer ran out of sequence.
   The following reaper options control the matching behaviour:
   }

\begin{itemize}{
   {$flow}{cascade}
   {$interitem}{1}
   {$align}{right}
   {$sublist}{\!begin{itemize}{{$flow}{compact}{interitem}{0}{margintop}{0}}}
   {$eosub}{\!end{itemize}}
}


\item{-restrict}
   \car{This restricts the matching algorithm to only consider the first part
   of the adapter - the argument to this option is the number of bases considered.}


\item{-3p-global}
\car{
   This option specifies stringency criteria for
   the best alignment found between the \_3pa and the read, anywhere.
   If the alignment passes the criteria (see below), the read is considered
   to have adapter sequence at that position.
   }

\item{-3p-prefix}
\car{
   This option specifies stringency criteria for an alignment
   that matches the start of the \_3pa with the end of the read. Additionally,
   the alignment may occur elsewhere in the read if followed by low complexity
   sequence.  If the alignment passes the criteria (see below), the read is
   considered to have adapter sequence at that position.
   }

\item{-3p-head-to-tail}
\car{
   This option specifies the minimum length at which a perfect match
   at the end of the read to the beginning
   of the \_3pa should be stripped. Examples:
   }
\verbatim{\:/
   ACGTACGATGCTAGCTAGCTAGCTCGCGCTATCTTCTA
   ACGTACGATGCTAGCTAGCTAGCTCGCGCTATCTTCT|
   ACGTACGATGCTAGCTAGCTAGCTCGCGCTATCTTC||
                                      |||
                                      CTAGTCGTAC}

\car{
   Such a match is removed if it is present and has length at least \it{k}
   (the argument to this option).  If \it{k} is zero no such match is
   attempted and this is the default setting. For data heavily
   contaminated with \_3pa sequence it can be worthwhile to always strip a
   perfect match (for example using \opt{-3p-head-to-tail}{1}), or otherwise
   the last bases of cleaned reads will be severely biased towards the bases at
   the start of the adapter sequence.  For such data this effect is worse than
   the effect of false positive matching, that is, those instances where a
   head-to-tail match exists and is stripped, and where the matching part is in
   fact properly part of the biological sequence fragment.

   }

\item{-3p-barcode}
\car{
   This specifies stringency criteria (see below) for the barcode section of the best
   alignment between the read and the concatenation \v{3p-si+barcode+3p-ad} in
   the geometry \it{3p-bc}.
   All barcodes are tried and the best scoring barcode
   is accepted. This is different from the \_5pbc case described below.
   The barcode is currently hardcoded to start either at the first or second
   base of the adapter.
   }


\item{-5p-barcode}
\car{
   This specifies stringency criteria (see below) for the alignment
   between a \_5pbc and the read.
   All barcodes are tried and the read is accepted only if a single barcode
   passes these criteria.
   }

\item{-5p-sinsert}
\car{This specifies stringency criteria for a match
     between the read and a sequence insert that should be present at the
     beginning of the read (after stripping of the \_5pbc if present).
     }

\end{itemize}

\sec1{alnreq}{Alignment test specification}

\def{genspec#1}{\bf{\v{\1}}}
\def{usespec#1}{\v{\1}}

\par{
   The following options all take a similar form of argument.  Where an \v{X}
   is written below, reaper ignores the corresponding parameter due to the
   availability of a canonical value (e.g. \it{length of barcode}).  It should
   ordinarily not be necessary to specify the \it{offset} parameter (below
   given as \genspec{o}).
}

\def{alnitem#2}{\item{\v{\1} \genspec{\2}}}

\begin{spacing}{{left}{2}{top}{1}{bottom}{1}}
\begin{itemize}{{itemmargin}{10}{align}{left}{flow}{cascade}{interitem}{1}{margintop}{0}}

\alnitem{-3p-global}{l/e/g/o}

\alnitem{-3p-prefix}{l/e/g/o}
   \car{The default value for \genspec{o} is \usespec{2}.}
\alnitem{-3p-barcode}{X/e/g}

\alnitem{-5p-barcode}{X/e/g/b}
   \car{The first (\genspec{l}) position is ignored, and the fourth (\genspec{b})
   position is interpreted as a bit field (see below).}

\alnitem{-5p-sinsert}{X/e/g/o}
   \car{The default value for \genspec{o} is \usespec{10}.}

\alnitem{-mr-tabu}{l/e/g/o}

\end{itemize}
\end{spacing}

\car{
   The argument to each
   is of the form \genspec{l/e/g/o} (example: \usespec{14/2/0/0}), as
   explained below. Generally speaking, the first, second, third and fourth positions respectively
   denote parameters related to \it{length}, \it{edit distance}, \it{gap size}, and \it{offset}.
   Exceptions exist, such as the fourth position in the \opt{-5p-barcode} argument.
   }

\par{
   It is possible to leave out any trailing part, so \genspec{l/e}
   or \usespec{12/2} is a valid form as well.
   The meaning of the separate parts are as follows. The context is that of
   the best local alignment found for a read and an adapter sequence, to decide
   whether that alignment represents a true match.
   It is judged to represent a true match if the alignment has a subpart
   satisfying the following criteria.
   }

\begin{itemize}{{align}{right}{flow}{compact}{interitem}{0}{margintop}{1}}

\: the non-breaking space \~ is to force proper baseline alignment. Bit weird.

\item{\~\genspec{l}}    The subpart stretches over at least \genspec{l} bases.
\item{\~\genspec{e}}    There are no more than \genspec{e} edits in the subpart.
\item{\~\genspec{g}}    The total gap length in the subpart does not exceed \genspec{g}.
\item{\~\genspec{o}}    The match occurs within an offset of \genspec{o} bases.
                        The exact meaning depends on the part being matched (see below).
                        A zero value implies on offset requirement at all.
\end{itemize}

\par{
   The fourth \genspec{b} field in the \opt{-5p-barcode} option is a bit field. Bit \usespec{1} implies
   that a \it{zip alignment} is attempted first between barcode and read. A zip alignment
   is one where only mismatches are allowed and the beginning
   of the barcode is aligned precisely to the beginning of the read.
   This can be useful for short barcodes,
   where matching barcodes at an offset in the read may too easily lead to false matches.
   Bit \usespec{2} implies that an alignment is attempted where the latter is allowed.
   In this case the number of offset positions are counted as edits
   and contribute towards the total number of edits (that will be compared with the
   \genspec{e} part).

   It is possible to combine the two approaches.
   By default the fourth field is set to \usespec{2}. For short barcodes it can be advisable
   to set it either to \usespec{1} or \usespec{3}.
   }

\par{
   For adapter matching and tabu matching the offset position, if utilised, indicates how far from the start
   of the adapter the match is allowed to occur.
   }

\par{
   For \opt{-5p-sinsert} the offset position indicates how far into the read the sequence
   insert is allowed to extend \it{beyond the length of the sequence insert itself}.
   For very short inserts it is useful to set this to zero or a very small value.
   }

\sec1{geom}{Geometry-dependent read processing}

\par{The way reads are processed is dependent on the presence or absence
   of barcodes and the geometry (i.e. lay-out) of the read.
   }


\sec2{nobc}{Geometries without barcode (-geom no-bc)}
\par{
   For geometry \it{no-bc}, matching is attempted with up to three different
   types of oligo fragments, all of which can be optional.
   }
   
\par{
   If specified in the \it{5p-sinsert} column or with the \opt{-5psi} option,
   a match is attempted between this sequence insert and the start of the read.
   If no such match is found, the read is by default discarded.
   If the \opt{keep-all} option is specified however such reads are
   truncated to be empty and kept as clean reads.
   }

\par{
   Subsequently, if specified in the \it{3p-ad} column or with the \opt{-3pa} option,
   a match is attempted with that adapter and the read.
   Matching is attempted in a cascading fashion, as described above
   under } \begin{spacing}{{left}{2}{top}{1}{bottom}{1}} \opt{-3p-global}\|
   \opt{-3p-prefix}\| \opt{-3p-head-to-tail}\| \end{spacing} \car{ If a match
   is present, it is removed. Naturally, a match is not required.  Further
   trimming is attempted as described in section\~\secref{postgeom}.  After
   this, if the read passes the length cutoff (by default no such cutoff is
   enforced), then the read is checked for contamination by \it{tabu}
   sequences, if any.
   }

\par{
   With the \v{no-bc} geometry reaper can be used either with or without a metadata
   file. If no metadata file is used the option \opt{-3pa} is required. This option
   specifies the \_3pa. It is still possible to turn off \_3pa matching by
   passing either the empty string or a single hyphen as argument to \opt{-3pa}.
   }

\par{
   Reaper processing in the \v{no-bc} geometry can be fully controlled without a
   metadata file by using the options \opt{-3pa}, \opt{-tabu} and \opt{-5psi}.
   }

\sec2{3pbc}{Geometries with a 3' barcode (-geom 3p-bc)}
\par{
   For geometry \it{3p-bc}, a match is attempted with the concatenation \v{3p-si+barcode+3p-ad},
   as described above under
   }
\begin{spacing}{{left}{2}{top}{1}{bottom}{1}}
   \opt{-3p-global}\|
   \opt{-3p-prefix}\|
   \opt{-3p-barcode}
\end{spacing}
\car{
   A match is required for the read to pass, so that it can be allocated to a
   barcode bucket. For all barcodes, the full concatenation is aligned
   and checked against the criteria
   specified by \opt{-3p-global} and \opt{-3p-prefix}, in that order.
   One of these two checks should succeed for a concatenation to be considered further.
   Additionally, the barcode section of
   the concatenated oligonucleotide is separately required to pass
   the criteria specified by \opt{-3p-barcode}. 
   }

\par{
   It should be noted that it is possible for multiple barcodes to pass the procedure
   just described, especially if barcodes are short.
   The reason is that read errors are increasingly likely towards the end of a read
   and may occur in the barcode section.
   The match criteria thus have to allow for a positive edit distance.
   Hence, alignment scores are tracked
   and the concatenation (and associated barcode) with the best score is chosen.
   The case where two or more barcodes are tied is considered a \it{conflict},
   and none is chosen.
   }

\par{
   Barcode resolution is followed by further attempted trimming as described
   in\~\secref{postgeom}.
   After this, if the read passes the length cutoff (by default
   no such cutoff is enforced), then \it{tabu} sequences are checked, if any.
   }


\sec2{5pbc}{Geometries with a 5' barcode (-geom 5p-bc)}
\par{
   For geometry \it{5p-bc} a barcode must be found at the beginning of the read.
   All barcodes are aligned and checked using the criteria specified by
   the \opt{-5p-barcode} option.

   Subsequently, a match with the \_5psi is required if such an insert
   is specified in the \v{5p-si} column of the metadata file. This match
   can be controlled using the option\~\opt{5p-sinsert}.
   Subsequently, matching of the \_3pa is attempted as described above under
   }
\begin{spacing}{{left}{2}{top}{1}{bottom}{1}}
   \opt{-3p-global}\|
   \opt{-3p-prefix}\|
   \opt{-3p-head-to-tail}
\end{spacing}
\car{
   and this is combined with further read trimming as described in\~\secref{postgeom}.
   }

\""{
   One should make sure that the edit distance
   specified by the \opt{-3p-barcode} criteria is conservative.
   A lax edit distance may lead
   to ambiguous barcode resolution, leading to the read to be dismissed.
   This is not a problem, as the read could not have been resolved
   with a more stringent edit distance.
   The real problem is that a read may be incorrectly resolved to a barcode
   due to a confluence 
   As a rule of thumb, it is suggested to use an edit distance such
   that the number of cases where a read can be mapped to
   different barcodes with the same edit distance is minimised.
   }


\""{
\sec2{none}{No geometry (-geom none)}
\par{
   As a special case, geometry \v{none} is recognised. It is identical to the
   geometry \v{no-bc}, except that it does not require specification of
   a metadata file.
   }

\begin{itemize}{
   {$flow}{compact}
   {$interitem}{0}
   {$align}{right}
}
\item \car{no meta file is read.}
\item \car{\it{tabu} sequence(s) and \_3pa may be either omitted or specified using the options \opt{-tabu} and \opt{-3pa}.}
\item \car{all other code (such as BBB and NNN check) is run, and \it{tabu} and
      \_3pa matching are attempted only if specified.}
\end{itemize}
}

\sec1{postgeom}{Further read processing}

\par{
   Before and after the check for adapter presence, a number of other criteria are tested,
   refered to as \it{trimming tests} further below.
   These test may establish that trimming is necessary independent of whether an
   adapter match is present or not. They are described below, and include
   checks for low base call quality, occurrence of (too many) \v{N}-masked bases,
   and low-complexity sequence.
   Each test that is employed can potentially necessitate the removal of a
   suffix of certain length. If at least one of these tests succeeds, the
   longest such suffix will be removed.

   }

\sec2{qqq}{Quality}
\par{
   Low quality sequence can be detected using the median quality value in a
   sliding window.  The quality-based trimming test is defined by the first
   base where this median value drops below a specified threshold.  This test
   is applied to the full read, bar an initial (adjustable) offset that is
   skipped.  The cutoff value and window length are specified using
   \opt{-qqq-check}{<cut-off>/<length>}. By default the trim cutoff is at the
   start of the window. Optionally an offset into the window can be specified
   using \opt{-qqq-check}{<cut-off>/<length>/<offset>}. It is possible (and the
   default approach) to omit an initial part of the read from inspection by
   using \opt{-qqq-check <cut>/<length>/<offset>/<prefix-size>}. This is useful
   for sequencers that require calibration during the first few sequencing
   cycles.  The default value for \usearg{<prefix-size>} is 10.

   }

\par{
   For \opt{-qqq-check} the cutoff relates to \it{the raw \sc{ascii} values
   found in the file} and expressly \it{not} to the transformed P-values
   they represent.}

\sec2{bbb}{killer Bees}
\par{\v{B} is a special Illumina quality score indicating the base at that position
   should not be trusted. Runs of \it{trailing} \v{B}s can be detected
   by specifying either \opt{--bcq-early} or \opt{--bcq-late}. With
   the former option the trimming is applied to the full read (before the adapter is matched), and
   consequently can lead to stripping of bases that could aid in adapter
   recognition.  With the latter option the trimming test is applied after
   adapter matching and handled simultaneously with the other trimming tests.

   }

\sec2{aaa}{poly-A}
\par{
   Trailing \v{A}s can be detected using \opt{-polya}{<count>}. This test
   only succeeds if the poly-A sequence has length at least \opt{<count>}.
   It is applied to the full read, before the adapter is matched.
   It is worthwhile to be aware of the more powerful \opt{-dust-suffix} and \opt{-dust-suffix-late} options.
   These will also remove poly-A stretches interspersed with other bases, and
   it is possible to make these options exclusively sensitive to A-rich sequences
   by using for example \opt{-dust-suffix}{20/A} and \opt{-dust-suffix-late}{20/A}.
   At the recommended default DUST cutoff 20 the smallest poly-A stretch
   recognised by these options is of length 6. Hence, depending on the data, the \opt{-polya}
   option may still be of use.
   }

\sec2{nnn}{N-masked bases}
\par{
   Bases may not be called and show up as \v{N} in the read. This
   trimming test uses a sliding window to identify whether a read suffix should be removed.
   Use \opt{-nnn-check <count>/<length>} to test for the presence
   of a window of size \usearg{<length>} in which
   at least \usearg{<count>} \v{N}s occur. The suffix starting at the first
   such window is the result of this test.
   }

\sec2{dust}{Low complexity sequence}
\par{
   Reaper has two mechanisms to deal with low complexity sequence.
   The two use very similar principles, as explained below.
   }

\par{
   The first approach that can be taken is to test for low complexity
   sequence at the end of a read, before adapter sequence is removed.
   This is done by computing the same criterion as used by DUST. The read
   suffix with highest DUST score is considered. The trimming test succeeds and
   this suffix is used if the score exceeds or is equal to the threshold
   specified as \opt{-dust-suffix}{<threshold>}.
   }

\par{
   A variant of this, still part of the first mechanism, is to apply
   this test \it{after} initial trimming by other means, such
   as trimming by adapter, quality, or occurrence of N-masked bases.
   Sequencing protocols now exist that require this. In some protocols it
   is possible that a \_3pa is still preceded by low complexity sequence, and
   in that case the detection test that starts at the end of the read can not
   extend beyond the adapter.
   An adapter-aware test can be specified independently with
   \opt{-dust-suffix-late}{<threshold>} and works identically to
   \opt{-dust-suffix}. It is possible and can be useful to use both
   options simultaneously, and a good value to use is the default DUST
   threshold\~\usearg{20}.
   }

\par{
   For both these options, \opt{-dust-suffix} and \opt{-dust-suffix-late},
   it is possible to restrict them to specific types of low-complexity
   sequence, namely those dominated by a single base. Examples are poly-A
   stretches interspersed with other bases or poly-T stretches interspersed
   with other bases. To exclude \it{only} such stretches use
   \opt{-dust-suffix}{20/A} to exlude poly-A dominated sequence
   or \opt{-dust-suffix}{20/AT} to exclude sequence that is either poly-A
   dominated or poly-T dominated. Other combinations of bases are allowed.
   A sequence is recognised as a poly-base low complexity sequence if
   it satisfies the DUST criterion and at least half of the bases are
   the same nucleotide and that nucleotide has been specified.
   If no bases are specified, no such demand is made.
   }


\par{
   The second mechanism removes the final \it{cleaned} read if it does not
   satisify the threshold specified by \opt{-tri}{<threshold>}. It is an
   accident of history that this criterion is a scaled version of the DUST
   criterion, applied to the full length of the clean read.  It was
   \aref{https://stat.ethz.ch/pipermail/bioc-sig-sequencing/2009-February/000170.html}{proposed
   by Hervé Pagès}, and a given DUST threshold (used by \opt{-dust-suffix} and
   \opt{-dust-suffix-late}) must be multiplied by two to obtain the
   corresponding \opt{-tri} threshold.  A reasonable threshold to choose for
   this option, if used, is thus \opt{-tri}{40}, corresponding with the default
   DUST threshold of\~\usearg{20}.

   }


\par{
   It can be useful to refrain from tri-nucleotide filtering so
   that quality control plots give a comprehensive view.
   It is possible to output the trinucleotide score alongside the read with reaper (using
   the formatting directive \v{%T}) and filter at a later stage.
   }

\sec2{length}{Length-based filtering}
\par{
   After adapter matching and trimming the length of a read may be short.
   With \opt{-clean-length}{<length>} any read shorter than \v{<length>} will
   be discarded.
   }

\par{
   Again, it can be useful to refrain from length-filtering so that quality
   control plots give a comprehensive view. Empty cleaned reads generally
   correspond to adapter polymers, and a peak at this length
   could correlate with size selection or ligation issues.
   }


\sec1{recipe}{Recipes}

\par{The examples below assume a directory called \v{out} exists.}

\begin{itemize}{
   {$flow}{cascade}
   {$interitem}{1}
   {$align}{right}
   {$margintop}{2}
   {$class_itemize}{recipe}
}
\item{Baseline reaper invocation, \_5pbc.}
\verbatim{\:/
reaper -geom 5p-bc -meta ex5pbc.meta -i ex5pbc.fastq.gz -basename out/ex5pbc}


\item{Baseline reaper invocation, \_3pbc.}
\verbatim{\:/
reaper -geom 3p-bc -meta ex3pbc.meta -i ex3pbc.fastq.gz -basename out/ex3pbc}

\item{Baseline reaper invocation, no barcode, using metadata file.}
\verbatim{\:/
reaper -geom no-bc -meta exnobc.meta -i exnobc.fastq.gz -basename out/nobcx3}


\item{Baseline reaper invocation, no barcode.}
\verbatim{\:/
reaper -geom no-bc -i exnobc.fastq.gz -basename out/exnobc -3pa TCGTATGCCGTCTTCTGCTTGT -tabu GTTCAGAGTTCTACAGTCCGACGATC}


\item{Remove any read containing one or more Ns, do not produce QC files.}
\verbatim{\:/
reaper -geom no-bc -i ex.fastq.gz --noqc --full-length -basename out/ex -nnn-check 1/1 -3pa ""}


\item{Reaper help \- see also the following section.}
\verbatim{reaper -h}


\end{itemize}

\sec1{help}{Reaper help}

\par{Below is the reaper version for this document and the corresponding help output, resulting from
\v{reaper --version} and \v{reaper\~-h} respectively.}


\verbatim{\system{../src/reaper}{{--version}}
\system{../src/reaper}{{-h}}}


\sec1{recordformat}{Input record specification}

\par{
   By default reaper expects \fastq input and writes \fastq output. A few options
   exist providing other formats. Additionally it is possible to specify custom
   input and output format using two simple format specification syntaxes.
   }

\par{
   \fasta input and output are specified using \opt{--fasta-in} and \opt{--fasta-out}.
   A slightly extended \fastq format is specified with \opt{--fastqx-out}. In this
   format the identifier line is extended with a \v{recno=<NUM>} field, where
   \v{<num>} indicates the record offset in the input file.
   Such a field is necessary for example to re-pair paired-end data after processing
   with reaper; \lref{tally.html}{tally} reads this format when equipped
   with the \opt{--fastqx-in} option.
   }

\par{
   The output format specification syntax is specified in the previous section,
   as part of the reaper help output under \v{-format-clean/lint specification syntax}.
\enref{record-format}{The input format specification language} is given below. It can be accessed on
   the command line by issuing \v{reaper --record-format}.
   }

\verbatim{\system{../src/reaper}{{--record-format}}}

\sec1{caveats}{Caveats}

\par{
   Do not use \opt{-basename}{foo/bar/} -- then files such as foo/bar/.clean.gz
   will be created (and not be visible with default ls).
   }

\sec1{at}{Author/contact}

\par{
   Reaper was written by Stijn van Dongen and benefited greatly from
   suggestions by Cei Abreu-Goodger, Anton Enright, Mat Davis, Sergei Manakhov,
   Harpreet Saini, Nenad Bartonicek and Leonor Quintais.
   For questions and feedback send e-mail
   to\~\~\v{kraken\~\@e{#x0040}\~ebi\~\@e{#x002E}\~ac\~\@e{#x002E}\~uk}.
}

\sec1{notes}{Notes}
\par{
   This page was generated from Aephea macros, \httpref{http://micans.org/aephea}.
   }


\"asd::add-toc-end"{End}
\</div>
\</div>


\end{simpledocument2}




\={myheader}

\begin{simpledocument2}{
   {$toc_anchor}{Table of Contents}
   {$day}{\system{date}{{+%e}}}
   {$month}{\system{date}{{+%B}}}
   {$year}{\system{date}{{+%Y}}}
   {$toc_date}{\!$month \!$day, \!$year}
   {$keywords}{short read sequence data filtering}
   {$html_title}{Reaper}
   {$title}{Reaper}
   {$subtitle}{Demultiplexing, trimming and filtering sequencing data}
   {$author}{Stijn van Dongen}
   {$css_import}{}
   {$css_append}{
      \zinsert{contrib/reaper2.css}
   }
}
\==


\done

\begin{itemize}{
   {$flow}{cascade}
   {$interitem}{1}
   {$align}{left}
   {$class_item}{namelist}
}
   {flow}{compact}
   {align}{right}
   {mark}{\@{&ndash;}}
   {interitem}{1}



