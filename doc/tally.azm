
\import{shared.zmm}

\""{
   -hsx
   -dsx
   -zip-factor
   -u
   -tri
   -give
}


\set{COLOUR1}{#ffbb66}
\set{COLOUR1}{#FFAD5C}
\set{COLOUR2}{DarkBlue}

\import{aephea/simpledocument2.zmm}
\input{myheader}        \: inline file, found at bottom of this file.


\<div id=asd_leftcolumn>{
   \"asd::maketoc"
}

\<div id=asd_document_outer>{ \"asd::add-toc-start"{Start}
\<div id=asd_document>{


\<div class="asd_date">{\$toc_date}
\<div class="asd_version">{tally-\finsert{../VERSION}}

\<div class="asd_title">{\$title}
\<div class="asd_subtitle">{\$subtitle}


\sec1{syn}{Synopsis}

\par{
   Tally is a program for deduplicating sequence fragments. It minimises memory
   usage by compressing sequences and using compact memory allocation
   techniques.  A built-in parser allows a variety of input file formats and a
   simple specification language allows flexible output file formats.
   It can be made aware of paired-end reads, and it can handle degenerate sequence
   inserts intended to reveal amplification biases.
   Tally comes with \lref{reaper.html}{\reaper}, a program for demultiplexing,
   trimming and filtering short read sequencing data.

   }


\sec1{description}{Description}

\begin{itemize}{
   {$flow}{compact}
   {mark}{\*{itembullet}}
   {$interitem}{1}
   {$align}{right}
}
\item
\car{
   In its simplest form \tally usage is as follows.
   This example uses as example input file name (the argument to the \opt{-i} option)
   the default \reaper output name.
   }

\verbatim{\:/
   tally -i out.lane.clean.gz -o out.lane.unique.gz}

\car{
   By default \tally writes gzipped files. It is possible to prevent this using the \opt{--nozip} option.
   }

\verbatim{\:/
   tally -i out.lane.clean.gz -o out.lane.unique --nozip}


\item
\car{
   By default \tally expects \sc{FASTQ} format.
   Other formats can be specified using the \opt{-record-format} option (refer
   to \secref{ex}).
   When processing paired-end files with \reaper and \tally, the easiest approach is
   to use the \reaper \opt{--fastqx-out} option and the \tally \opt{--fastqx-in} option.
   }
   
\item
\car{
   It is possible to retain quality
   information by supplying the \opt{--with-quality} option. Tally will then
   keep track of read quality; for redundant (identical) reads it will, for a
   given base, keep the best quality score for that base among the reads.
   }

\par{
   \it{Note that retaining quality increases the memory requirements
   approximately fivefold.} This substantial increase is due to the fact
   that quality scores are stored in raw form. Sequences are stored in compressed format
   making \tally very memory-efficient if quality does not need to be tracked.
   }

\item
\car{
   By default tally will try to set parameters automatically by inspecting
   the input file. This requires that the input file is searchable, i.e.
   not streamed via a pipe.
   This automatic behaviour can be turned off using the option \opt{--no-auto}.
   It is possible to obtain a \it{rough} estimate of memory usage using \opt{--peek}.
   }

\item
\car{
   Tally can read paired end samples. Refer to sections \secref{pe}
   and \secref{ex}.
   }

\item
\car{
   Tally can tally already counted reads, meaning that it can read in counts associated
   with reads. This requires usage of the \opt{-record-format} option and the \v{%X}
   directive (see \secref{ex}).
   }

\item
\car{
   Tally can read a variety of formats. The input syntax can be described
   with the \opt{-record-format} option, accepting a syntax nearly
   identical to the identically named \reaper option.
   It should be noted that \tally assigns \it{meaning} to very few fields.
   These are the read itself (\v{%R}), a count associated with the read (\v{%X}),
   a record offset (\v{%J} \- required when processing paired files)
   and a string identifier for paired-end safety checking (\v{%I} \- refer to \secref{pe}).
   }


\item
\car{
   Tally can handle degenerate sequence inserts. The \opt{-dsi}{<num>} option
   causes \tally to strip the first \v{<num>} bases from the read upon output.
   The output may thus still contain duplicated fragments; these are informative
   for amplification biases.
   }


\item
\car{
   Tally generates summary statistics on the number of reads
   read and produced. By default these are sent to
   the diagnostic stream. It is possible to redirect them to file
   by using the \opt{-sumstat}{<file-name>} option.
   }


\end{itemize}


\sec1{pe}{Paired end read processing}

\par{
   Tally supports paired end read processing in the following two scenarios.
   In the simplest case it is assumed that two sample files with the same number
   of reads are provided. Reads at identical offsets in the respective
   files correspond to paired ends. In this scenario the user need only
   specify the extra input file with the \opt{-j}\~option and the extra output
   file with the \opt{-p}\~option.
   }

\par{
   In the more involved case the paired files are processed with \reaper
   or another program, and after processing the implicit record-by-record or line-by-line
   correspondence between the files may be lost. It is then neceessary that
   record offset information is attached to the records. This will be used by \tally
   to pair up records.
   The \reaper program can be instructed to include offset information
   with the \opt{--fastqx-out} option.
   Tally can be instructed to read this format by giving it the \opt{--fastqx-in} option.
   Alternatively custom formats can be created with the \reaper output \opt{-format-clean} option and
   the \tally input option \opt{-record-format}. These must be matched and use
   the record-offset encoding \v{%J} directive.
   The reason for using record offset numbers as identifiers is that a numerical
   and increasing identifier can be used to efficiently pair reads from different files.
   }

\par{
   If \tally is instructed to parse \sc{FASTQ} identifiers (this is the
   case when using \opt{--fastqx-in} for example)
   it will check whether identifiers are identical for paired reads.
   The number of non-matching identifiers is reported after processing.
   }

\par{
   Paired end processing is enabled
   by supplying \tally with two input file names as arguments to the \opt{-i}
   and \opt{-j} options.
   When processing paired end reads output can be sent to a single file or
   to two files. To send output to a single file just use the \opt{-o} file output option,
   the \opt{-format} option and \v{%A} and \v{%B} directives for the
   first, respectively second fragment.
   To send output to two files, additionally use the \opt{-p} file output
   option. In this case, the \v{%R} directive becomes context aware. It refers
   to the first fragment when outputting to the first file (specified by \opt{-o})
   and to the second fragment when outputting to the second file (specified by \opt{-p}).

   }

\sec1{ex}{Examples}


\def{ex#1}{\<span style="font-size:larger; background-color:beige; border-radius: 5px; padding: 2px 8px;">{\1}}

\begin{itemize}{
   {$flow}{compact}
   {$interitem}{1}
   {$align}{right}
   {$margintop}{2}
}
\item \ex{Baseline tally invocation, \sc{FASTQ} input and output}

\verbatim{\:/
tally -i out.lane.clean.gz -o out.lane.unique.gz}

\car{The first three records will look similar to this:}
\verbatim{\:/
@trn_1      31874
TAGCTTATCAGACTGATGTTGAC
+
~~~~~~~~~~~~~~~~~~~~~~~
@trn_2      26764
ACTCAAACTGGGGGCTCTTTT
+
~~~~~~~~~~~~~~~~~~~~~
@trn_3      11866
AGTGCCGCAGAGTTTGTAGTGT
+
~~~~~~~~~~~~~~~~~~~~~~}

\car{
   Note that \sc{FASTQ} identifiers have disappeared. The output identifiers are
   formed by the fixed string \v{trn} (for \it{tally record number}) followed by
   the output record number. The number of times a read was observed is specified
   on the identifier line as the second field.
   }

\item \ex{Changing the output format}

\par{A simple line-based format can be obtained using e.g. \opt{-format\~'%R%t%X%n'}.
   The output (containing reads and their counts) will look like this:
}

\verbatim{\:/
TAGCTTATCAGACTGATGTTGAC 31874
ACTCAAACTGGGGGCTCTTTT   26764
AGTGCCGCAGAGTTTGTAGTGT  11866}

\car{The set of supported directives available to the \opt{-format} option is this:}

\verbatim{\:/
%R  read
%L  length
%C  number of occurrences
%X  number of occurrences
%T  trinucleotide score
%I  read identifier - numerical identifier constructed on output
%t  tab
%n  newline
%%  percentage character}


\par{To obtain \sc{FASTA} output, use \opt{--fasta-out}.
}


\item \ex{Changing the input format}


\par{
   \sc{FASTA} format can be read using the \opt{--fasta-in} option.
   Other formats can be read using the \opt{-record-format} option
   (see \secref{ex}).
}


\item \ex{Reading in counted data}


\par{
   Tally can read in data that is already counted. This requires usage of
   \opt{-record-format} and the \v{%X} directive. To read in a simple two-field
   line-based format consisting of read and count one would use:
   }

\verbatim{-record-format '%R%b%X%n'}


\item \ex{Retaining quality}

\par{To retain quality information, use \opt{--with-quality}. Memory usage
will increase approximately five-fold.
For each base the best quality score is recorded.
Example output:
}

\verbatim{\:/
@trn_1  31874
TAGCTTATCAGACTGATGTTGAC
+
>AAAAAAAAA>AA>?>>>??>>>
@trn_2  26764
ACTCAAACTGGGGGCTCTTTT
+
AAAAAAAAAAAAAAA>>>>>>
@trn_3  11866
AGTGCCGCAGAGTTTGTAGTGT
+
AAAAAAAAAAAAA?A>>>>>>>}




\item \ex{Re-pairing and tallying reaper-processed paired-end files}

\par{
   In this scenario it is assumed that each of the paired files
   was processed independently by \reaper, and as a result the record offset correspondence
   between the two files is lost.
   The invocation below assumes \reaper was given the \opt{--fastqx-out} option.
   This causes the introduction of an additional field on the identifier line
   containing the record offset number, allowing \tally to pair up the two files.
   Options such as \opt{--with-quality} can be given additionally.
}

\verbatim{\:/
tally -i out1.gz -j out2.gz -o out1.unique.gz -p out2.unique.gz --fastqx-in}


\item \ex{Re-pairing reaper-processed files without tallying}

\par{
   In this scenario identical reads will not be collapsed.
   This simply requires the use of the \opt{--no-tally} option.
   \it{Please note that tally will in this case output the identifiers found
   in the input file.}
   Options such as \opt{--with-quality} can be given additionally.
}

\verbatim{\:/
tally -i out1.gz -j out2.gz -o out1.unique.gz -p out2.unique.gz --fastqx-in --no-tally}


\item \ex{Tallying implicitly paired files}

\par{
   In this scenario two files are implicitly paired, such as is
   the case for unprocessed paired-end \sc{FASTQ} files.
   Tally will process both files record-by-record and pair up
   records at the same offset. This requires the option \opt{--pair-by-offset}.
   }

\verbatim{\:/
tally -i out1.gz -j out2.gz -o out1.unique.gz -p out2.unique.gz --pair-by-offset}



\item \ex{Re-pairing files in other formats}

\par{
   This can be achieved only if the record format can be recognised by
   the \opt{-record-format} specification language, and requires the presence
   of a record offset field in the record format. This field can be read using
   the \v{%J} directive.
   The specification language is documented below.
   }

\verbatim{\:/
     %R  expect read (longest sequence found over [a-zA-Z]*) - empty read allowed
     %J  expect record offset (integer)
     %I  expect identifier (longest sequence of non-blank)
     %Q  expect quality (longest sequence of non-blank)
     %X  expect count (a nonnegative integer number)
     %F  expect and discard field (longest sequence of non-tab)
     %G  expect and discard field (longest sequence of non-blank)
     %#  discard everything until end of line
     %b  expect run of blanks (space or tab)
     %n  expect end of line match
     %.  expect and discard any character
     %s  expect a space
     %t  expect a tab
     %%  expect a percent sign}

\car{
   The directives listed above are all placeholders that will be filled by
   \tally with the appropriate character or field. All such placeholders
   start with a percent sign (\v{%}). Anything that is not a placeholder
   will be copied verbatim.
   An example is the standard count-extended \sc{FASTQ} format output by \reaper
   when using \opt{--fastqx-out}) and expected by \tally (using \opt{--fastqx-in}.
   It corresponds to:
   }

\verbatim{-record-format '@%I%brecno=%J%#%R%n+%n%Q%n'}


\end{itemize}



\sec1{at}{Author/contact}

\par{
   Tally was written by Stijn van Dongen and benefited greatly from suggestions
   by Anton Enright, Mat Davis, Sergei Manakhov, Nenad Bartonicek and Leonor Quintais.
   For questions and feedback send e-mail
   to\~\~\v{kraken\~\@e{#x0040}\~ebi\~\@e{#x002E}\~ac\~\@e{#x002E}\~uk}.
}


\""{
   The integer identifier should be produced by \reaper or a similar program and contain the
   record number associated with a read. This identifier is used to match up paired end reads.
   The string identifier can be used as an additional check to safeguard correct matching
   up of paired ends. This requires that paired sample files carry identical identifiers
   for paired reads.
   }

\"asd::add-toc-end"{End}
}}
\end{simpledocument2}


\done

\={myheader}

\set{COLOUR1}{#ffbb66}
\set{COLOUR2}{DarkBlue}

\begin{simpledocument2}{
   {$toc_anchor}{Table of Contents}
   {$day}{\system{date}{{+%e}}}
   {$month}{\system{date}{{+%B}}}
   {$year}{\system{date}{{+%Y}}}
   {$toc_date}{\!$month \!$day, \!$year}
   {$keywords}{deduplication of sequence fragments}
   {$html_title}{Tally}
   {$title}{Tally}
   {$subtitle}{Deduplication of sequence fragments}
   {$author}{Stijn van Dongen}

   {$css_import}{}         \: not used.
                           \: example of usage would be {$css_import}{{url1}{url2}...{urlN}}
   {$css_append}{
      \zinsert{contrib/reaper2.css}
   }
}
\==

\begin{itemize}{
   {$flow}{cascade}
   {$interitem}{1}
   {$align}{left}
   {$class_item}{namelist}
}
   {flow}{compact}
   {align}{right}
   {mark}{\@{&ndash;}}
   {interitem}{1}
